
Please refer to C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\target\surefire-reports for the individual test results.
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\main\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\test\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ done ---
[INFO] Skipping execution of surefire because it has already been run for this configuration
[INFO] 
[INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ done ---
[INFO] Building jar: C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\target\done-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  05:48 min
[INFO] Finished at: 2022-06-02T13:16:00+05:30
[INFO] ------------------------------------------------------------------------
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for done:done:jar:0.0.1-SNAPSHOT
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi:jar -> version 3.16-beta2 vs 5.0.0 @ line 162, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> version 3.9 vs 5.0.0 @ line 169, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> version 3.9 vs 5.0.0 @ line 176, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-scratchpad:jar -> version 3.9 vs 5.0.0 @ line 183, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:ooxml-schemas:jar -> version 1.1 vs 1.4 @ line 190, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.seleniumhq.selenium:selenium-java:jar -> version 4.0.0-rc-1 vs 4.0.0 @ line 217, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.testng:testng:jar -> version 7.5 vs 7.4.0 @ line 224, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi:jar -> duplicate declaration of version 3.16-beta2 @ line 232, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> duplicate declaration of version 3.9 @ line 239, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml-schemas:jar -> duplicate declaration of version 3.9 @ line 244, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-scratchpad:jar -> duplicate declaration of version 3.9 @ line 249, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:ooxml-schemas:jar -> duplicate declaration of version 1.1 @ line 254, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:openxml4j:jar -> duplicate declaration of version 1.0-beta @ line 260, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi:jar -> version 3.16-beta2 vs 5.0.0 @ line 266, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> version 3.9 vs 5.0.0 @ line 273, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> version 3.9 vs 5.0.0 @ line 280, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-scratchpad:jar -> version 3.9 vs 5.0.0 @ line 287, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:ooxml-schemas:jar -> version 1.1 vs 1.4 @ line 294, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.xmlbeans:xmlbeans:jar -> version 3.1.0 vs 5.0.2 @ line 302, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.seleniumhq.selenium:selenium-java:jar -> version 4.0.0-rc-1 vs 4.0.0 @ line 309, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.testng:testng:jar -> version 7.5 vs 7.4.0 @ line 316, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi:jar -> version 3.16-beta2 vs 5.1.0 @ line 341, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml:jar -> version 3.9 vs 5.1.0 @ line 349, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-ooxml-schemas:jar -> version 3.9 vs 4.1.2 @ line 356, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-scratchpad:jar -> version 3.9 vs 5.1.0 @ line 363, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:openxml4j:jar -> duplicate declaration of version 1.0-beta @ line 371, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:ooxml-schemas:jar -> version 1.1 vs 1.4 @ line 379, column 15
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.poi:poi-scratchpad:jar -> version 3.9 vs 5.1.0 @ line 444, column 15
[WARNING] 'build.pluginManagement.plugins.plugin.(groupId:artifactId)' must be unique but found duplicate declaration of plugin org.apache.maven.plugins:maven-surefire-plugin @ line 510, column 13
[WARNING] 'build.pluginManagement.plugins.plugin.(groupId:artifactId)' must be unique but found duplicate declaration of plugin org.apache.maven.plugins:maven-surefire-plugin @ line 554, column 13
[WARNING] 'build.pluginManagement.plugins.plugin.(groupId:artifactId)' must be unique but found duplicate declaration of plugin net.masterthought:maven-cucumber-reporting @ line 561, column 13
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] -----------------------------< done:done >------------------------------
[INFO] Building done 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] Downloading from : https://repo.maven.apache.org/maven2/io/cucumber/messages/maven-metadata.xml
[INFO] Downloaded from : https://repo.maven.apache.org/maven2/io/cucumber/messages/maven-metadata.xml (2.1 kB at 1.2 kB/s)
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\main\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\test\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ done ---
[INFO] Surefire report directory: C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running cucumber.options.TestRunner
Configuring TestNG with: org.apache.maven.surefire.testng.conf.TestNG652Configurator@588df31b

@PlaceGetDeleteOrder @Regression @ETH
Scenario Outline: Verify place order , get order  and cancel order api                                                                                            # src/test/java/features/ETHINR.feature:20
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:03.633Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"0.1","orderId":"cd904b99-4fb1-4af1-8cd7-115f83dcffee","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:03.633Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "data.side" of response "BUY"                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:03.633Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"0.1","orderId":"cd904b99-4fb1-4af1-8cd7-115f83dcffee","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:03.633Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"cancelled":true,"info":{"message":"Order Cancelled"}},"message":"Order cancelled"}

  When Providing request PathUrl "PlaceOrder" with method "DELETE"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order cancelled"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@UpdateOrde123r @Regression @ETH
Scenario: Verify Update Order api                                                                                                                                 # src/test/java/features/ETHINR.feature:23
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:06.782Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"0.1","orderId":"d2d94b8c-3f58-4589-9c54-94a2344da2e0","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:06.782Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:06.782Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"0.1","orderId":"d2d94b8c-3f58-4589-9c54-94a2344da2e0","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:06.782Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Update an order for broker "B2" of  instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "103" username "user1" orderType "LIMIT"         # stepDefinations.SDplaceOrderofBroker1.update_an_order_of_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:08.235Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"103","makerFee":"0.1","orderId":"ee00a099-0a30-4ec2-a6df-0eb11c56b2bd","orderType":"","quantity":"19.417475728","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:08.235Z"},"message":"Order updated successfully"}

  When Providing request PathUrl "PlaceOrder" with method "PATCH"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order updated successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":"1 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@Add_Delete_IP @Regression @ETH
Scenario: Verify Add IP and delete IP                            # src/test/java/features/ETHINR.feature:38
  Given Add IP for a broker "B2"                                 # stepDefinations.SDplaceOrderofBroker1.add_ip_for_a_broker(java.lang.String)
{"data":"27f5cd7c-b9a4-4088-8a71-df0f197ca644","message":"Activated the IP: 106.193.205.109"}

  When Providing request PathUrl "AddIP" with method "POST"      # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  Then Extracting the data "data"                                # stepDefinations.SDplaceOrderofBroker1.Extracting_the_data(java.lang.String)
{"message":"IP removed successfully"}

  When Providing request PathUrl "AddIP" with method "DELETE"    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "IP removed successfully" # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)

@CancelAllOrder @Regression @ETH
Scenario: Verify CancelAllOrder                                         # src/test/java/features/ETHINR.feature:48
  Given loading the header for broker "B1"                              # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE" # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                              # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE" # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@GetAllOrder @Regression @ETH
Scenario: Verify GetAllOrder                                         # src/test/java/features/ETHINR.feature:61
  Given loading the header for broker "B1"                           # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":[{"average_price":"1000","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:11:59.813Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderID":"d9c5cd19-fbac-44c2-a3fb-d55b51bc84ec","quantity":5,"side":"SELL","status":"FULFILLED","takerFee":"0.07","trades":[{"baseQuantity":5,"createdAt":"2022-06-10T06:12:00.079Z","feeDenomination":"NA","isBuyerMaker":true,"price":1000,"quoteQuantity":5000,"status":"DECREMENTED","tradeID":"7282b8d5-2bc6-437d-857a-ae210c65f759","updatedAt":"2022-06-10T06:12:00.079Z"}],"updated_at":"2022-06-10T06:12:00.080Z"},{"average_price":"1000","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:11:57.744Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderID":"f1040272-e2f2-4961-a0f7-ccadccde4c9c","quantity":10,"side":"BUY","status":"PARTIALLY_CANCELLED","takerFee":"0.07","trades":[{"baseQuantity":5,"createdAt":"2022-06-10T06:12:00.079Z","feeDenomination":"NA","isBuyerMaker":true,"price":1000,"quoteQuantity":5000,"status":"DECREMENTED","tradeID":"7282b8d5-2bc6-437d-857a-ae210c65f759","updatedAt":"2022-06-10T06:12:00.079Z"}],"updated_at":"2022-06-10T06:16:51.611Z"}],"message":"Orders fetched successfully"}

  When Providing request PathUrl "GetAllOrders" with method "GET"    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                   # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Orders fetched successfully" # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)

@GetAllIps @Regression @ETH
Scenario: Verify GetAllIps                                         # src/test/java/features/ETHINR.feature:68
  Given loading the header for broker "B1"                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":[{"IP":"77df617b-2651-4998-a6da-466c7bf74e95","Address":"152.57.102.213"},{"IP":"e6139753-07a9-49f5-b3ad-8ac28e6284ef","Address":"157.33.40.248"},{"IP":"580e855a-fbc8-409e-ba2f-df61b65d33ab","Address":"157.33.32.71"},{"IP":"8724c5c5-29d8-4d9d-a729-07e7d4f89268","Address":"152.57.155.193"},{"IP":"212648d2-210e-41c2-aece-821881db0f4c","Address":"10.0.10.11"},{"IP":"ab6fb647-1282-4d66-bbaf-ed5da4e43024","Address":"10.0.10.11"},{"IP":"0530e561-c791-481b-a2e2-887ce4a05b8c","Address":"10.0.10.11"},{"IP":"ac4055a1-7bef-4411-ae78-3fcdcff42062","Address":"10.0.10.11"},{"IP":"d2e797d5-2868-4720-aaab-c7f9e4f8e5c4","Address":"10.0.10.11"},{"IP":"6d9912ad-2f97-48aa-a24c-01986b6695a8","Address":"10.0.10.11"},{"IP":"6a9788c9-973d-4dcb-a8d6-8f100c58b42a","Address":"157.33.75.32"},{"IP":"40bcc7e3-aede-435d-950a-ef1cca5d1a6f","Address":"10.0.10.11"},{"IP":"b34ef687-6a12-47df-831f-841e88715ff5","Address":"157.33.39.179"},{"IP":"59585338-ca6d-4af3-a304-8fb8358c275a","Address":"157.33.39.179"},{"IP":"caa54949-7972-4ea7-a47b-4160bbd57915","Address":"157.33.39.177"},{"IP":"cd9f22f9-dcf5-4a0c-8ea5-e14818314435","Address":"157.33.39.179"},{"IP":"73e9c00f-0e24-4d39-a8e7-490398939e89","Address":"157.33.39.179"},{"IP":"3c4d170b-3f49-4e02-b5eb-ba0cb0192fcc","Address":"157.33.39.179"},{"IP":"b5eec62c-dba7-42fd-b7f5-4af915f41e24","Address":"157.33.65.175"},{"IP":"ff2c641b-093d-43ed-8ffe-3c5c37aa2319","Address":"157.33.39.171"},{"IP":"d1b22fc5-fa81-4ff1-aff3-c8187756db55","Address":"157.33.39.179"},{"IP":"34060c34-184f-4c68-86e8-f81c8cd51c8c","Address":"152.57.116.67"},{"IP":"f14002ef-f334-4488-bcb8-6f597082a1ef","Address":"152.57.140.254"},{"IP":"b1050d39-7255-40ff-95af-6fcf2d7dc9dd","Address":"152.57.136.101"},{"IP":"57b00ed9-cb0c-409e-8b0f-cdfc91019778","Address":"152.57.156.122"},{"IP":"4fabe859-dc88-430e-8c2f-9bad336d25f0","Address":"152.57.128.192"},{"IP":"e9a38577-00f9-4c4c-993a-e762395f0dbc","Address":"152.57.132.121"},{"IP":"11e6e991-d828-47be-a170-37c5cfa1e813","Address":"157.33.61.133"},{"IP":"b9e695b4-b69f-4b6b-965b-623861ab9c46","Address":"110.226.157.74"},{"IP":"9e8b232f-bb7f-49c0-975b-99988bfad630","Address":"152.57.138.17"},{"IP":"84562abd-a183-4f5e-a688-42ed0eda4f72","Address":"157.33.36.77"},{"IP":"a560bfac-11dd-4248-84d8-535fa57d84bc","Address":"157.33.36.75"},{"IP":"f4393fc2-ce2a-49f7-a8ee-fe40f65a61c9","Address":"157.33.61.136"},{"IP":"4d3e303d-5f0c-45cb-bb22-907a2b8255cc","Address":"157.33.57.199"},{"IP":"497d2df3-afea-4cd9-b978-28c340f76a8c","Address":"157.33.101.143"},{"IP":"7adbaec0-01f7-41f1-aa94-9c36abea90f9","Address":"157.33.96.224"},{"IP":"e86d0315-ceec-4659-b0a7-24490ae7757d","Address":"223.177.227.24"},{"IP":"365b0aa8-f478-44eb-b5f4-0c6ed4c207da","Address":"223.177.227.2"},{"IP":"3f3327a9-c08b-4a43-a2cc-674a52c3b416","Address":"157.33.108.62"},{"IP":"51433723-e78b-4119-a08a-c34269bd7b73","Address":"0.0.0.0"},{"IP":"c6eaec00-e874-48ed-bfe9-b7bfc3ac3eb1","Address":"192.168.43.105"},{"IP":"0137dc5f-b01f-4ed7-b504-7ec7a7f4b97c","Address":"157.33.112.46"},{"IP":"92466826-e18a-4d00-a2a1-ad05d362119e","Address":"106.211.113.199"},{"IP":"27a1be91-55d3-4812-825f-e0f4b19f3a0b","Address":"223.177.227.246"},{"IP":"00234f48-300a-486b-8c07-4fef6d1ac6cd","Address":"157.33.112.40"},{"IP":"ce583736-4a41-4fd4-a67c-634a136eb020","Address":"192.168.1.22"},{"IP":"1b4df246-b648-429c-913e-38524ddc51f0","Address":"106.213.46.9"},{"IP":"1723eda9-84e6-4184-8ee9-cd3be0aff91b","Address":"152.57.135.146"},{"IP":"31e22e6c-620a-4e9e-84ac-a8d455088e60","Address":"106.220.141.48"},{"IP":"0ae57e4c-5cd1-4aa9-85dd-d46015200f3a","Address":"117.99.248.136"},{"IP":"5ff99379-9837-4467-ac69-28d9977d130f","Address":"117.99.254.56"},{"IP":"8e2ed08e-8306-45a2-850c-05558ea7b809","Address":"117.99.245.39"},{"IP":"0310ee02-8005-4fc1-93a1-293affd789cd","Address":"117.99.241.50"},{"IP":"6497ed75-0b3a-4da1-a7d7-cf5faa4cb0ab","Address":"117.99.240.97"},{"IP":"26ddf43d-b975-4706-a051-c19644a08841","Address":"106.220.219.187"},{"IP":"d6a915cb-1449-49e7-bf2e-1ca5f81e1fbb","Address":"106.195.10.209"},{"IP":"c8c07ef2-19f5-435b-a402-52a71647180c","Address":"106.195.14.70"},{"IP":"3b4ce703-d810-4142-b013-9b80becd6cd6","Address":"106.195.14.69"},{"IP":"d958b8a8-9b10-4d12-97f4-192a062ba29c","Address":"106.195.4.139"},{"IP":"832de172-a008-45ce-bbde-ac19fdd260d2","Address":"106.195.9.128"},{"IP":"e5a64b26-81b1-4f8e-a016-eabf77819637","Address":"106.220.95.4"},{"IP":"33813c0d-0f45-4948-a62b-8d2dc5f2d627","Address":"106.220.94.202"},{"IP":"28dd4e5c-04c6-4f65-9103-28d4ecef93b7","Address":"192.168.173.232"},{"IP":"dcf6344b-dd93-4738-a92b-62ed01f13c52","Address":"106.195.12.183"},{"IP":"628a0c4e-8cfd-4ea1-a523-6ed87e40eab5","Address":"106.220.94.204"},{"IP":"68a962c9-33ec-49b3-80de-94c2bf6fa107","Address":"106.195.14.45"},{"IP":"bef5a91b-75cc-40e5-9901-9062253d258b","Address":"106.195.8.75"},{"IP":"bf9ef987-170a-4b51-ae62-137a1e510d64","Address":"106.195.6.75"},{"IP":"76daa31e-8611-40a5-9d69-64f0718afe34","Address":"106.195.9.3"},{"IP":"ed25c950-efb0-45f1-b590-0ad1c3ab3ef9","Address":"106.220.94.24"},{"IP":"6547de82-de26-499b-a871-3d1347545e18","Address":"106.220.94.14"},{"IP":"fe2bddf0-bb00-4ba3-9f95-9732f92248bf","Address":"106.195.6.229"},{"IP":"47d5b321-a7b7-4412-8051-03decc4dbf28","Address":"106.195.15.139"},{"IP":"fd13aaaf-5cc4-4219-9de2-09a258e53206","Address":"106.195.1.153"},{"IP":"2ba90337-0c48-4fbf-89d1-4697f5501d14","Address":"106.195.15.120"},{"IP":"fec46f46-b040-4feb-9e4c-a81df35e3caf","Address":"106.195.0.118"},{"IP":"0350cfb8-de84-4de9-8883-a786826c021e","Address":"106.195.14.0"},{"IP":"6c4e1e76-dabb-419d-b2dc-74f0492d42d7","Address":"106.220.166.143"},{"IP":"a6bdf86b-23e3-4442-ab41-1c8577e8145a","Address":"106.195.8.50"},{"IP":"08a3db85-9d4c-4031-a9e3-60d1e797a3e2","Address":"10.2.34.204"},{"IP":"0d75413c-e77b-4297-bf08-bdc55bc29f13","Address":"106.195.12.233"},{"IP":"9333d2f1-587e-4945-85c8-f24c225493c5","Address":"106.195.8.59"},{"IP":"b07cacaf-73e9-4451-9970-55faf9cbc3dd","Address":"106.193.205.109"},{"IP":"8263bde6-414d-4c5b-943a-95d82133729b","Address":"106.220.152.235"}],"message":"Listed IPs for the Broker"}

  When Providing request PathUrl "AddIP" with method "GET"         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Listed IPs for the Broker" # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)

@GetBalanceforDifferentBrokerfulfilledcase @Regression @ETH
Scenario: Verify funds for diffrent broker in fulfilled case                                                                                                        # src/test/java/features/ETHINR.feature:76
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130768599.3536362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000823.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3699947.59380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 100001.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:16.987Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"d2fdcc04-1920-4f16-bb89-f7422418d49b","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:16.987Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:16.987Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"d2fdcc04-1920-4f16-bb89-f7422418d49b","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:16.987Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                   # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130758592.3536362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000823.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3699947.59380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 100001.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:20.018Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"d996714d-6ac2-4d10-a3f5-62066792422f","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:20.018Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:20.018Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"d996714d-6ac2-4d10-a3f5-62066792422f","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:20.018Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                             # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                             # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130758603.3536362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000824.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3709927.59380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 100000.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 9996.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 9980.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 16.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -12.0
  Then Check fees "4" for diffrent broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:116)


@ETH
Scenario: Verify funds for diffrent broker in partially fulfilled case                                                                                             # src/test/java/features/ETHINR.feature:119
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130758603.3536362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000824.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3709927.59380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 100000.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:36.287Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"984afcde-eb14-46f1-9d27-f5ce1318f747","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:36.287Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:36.287Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"984afcde-eb14-46f1-9d27-f5ce1318f747","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:36.287Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130748596.3536362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000824.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3709927.59380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 100000.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:39.535Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"297044a8-89e8-4cea-855e-cefab5bec330","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:20:39.535Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:20:39.535Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"297044a8-89e8-4cea-855e-cefab5bec330","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:20:39.872Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130748601.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 10001.5
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 4990.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 0.5
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 0.5
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 5011.5
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -5009.5
  Then Check fees "2" for diffrent broker                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<5011.5> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:159)


@ETH
Scenario: Verify funds for diffrent broker in cancelled case                                                                                                          # src/test/java/features/ETHINR.feature:162
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130748601.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "3500000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:55.148Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3500000","makerFee":"-0.04","orderId":"8f356cdc-9cba-4ba6-8742-fdcd7bfef505","orderType":"","quantity":"0.002857142","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:55.148Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                      # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:20:55.148Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3500000","makerFee":"-0.04","orderId":"8f356cdc-9cba-4ba6-8742-fdcd7bfef505","orderType":"","quantity":"0.002857142","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:20:55.148Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130738594.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "3600000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:21:05.911Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3600000","makerFee":"0.1","orderId":"1d58114e-3b9d-4610-a620-adf887067ac1","orderType":"","quantity":"0.002777777","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:21:05.911Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                      # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:21:05.911Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3600000","makerFee":"0.1","orderId":"1d58114e-3b9d-4610-a620-adf887067ac1","orderType":"","quantity":"0.002777777","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:21:05.911Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"20 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                               # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"1 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                               # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130738594.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 10007.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 0.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 0.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 0.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 10007.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -10007.0
  Then Check fees "0.0" for diffrent broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<10007.0> but was:<0.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "0.0" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:202)


@ETH
Scenario: Verify funds for diffrent broker in price improvement case                                                                                               # src/test/java/features/ETHINR.feature:205
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130738594.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:24.008Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3822d02b-77a0-4447-871e-79a6b5c029ff","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:24.008Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:24.008Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3822d02b-77a0-4447-871e-79a6b5c029ff","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:24.008Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130728587.8536362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000825.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3714917.59380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 100000.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "5000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:21:28.617Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"5000","makerFee":"0.1","orderId":"8f169fce-9e68-401d-81fb-a52daca0a751","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:21:28.617Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"19971.43","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:21:28.617Z","filledQuantity":1,"instrument":"ETH/INR","limit_price":"5000","makerFee":"0.1","orderId":"8f169fce-9e68-401d-81fb-a52daca0a751","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:21:29.262Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130728609.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3734849.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99999.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 9985.030000001192
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 19931.489999999758
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = -9946.459999998566
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= 9950.459999998566
  Then Check fees "4" for diffrent broker                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<-9946.459999998566> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:245)


@GetBalanceforDifferentBroker12 @Regression @ETH
Scenario: (placing BUY order first)Verify funds while Updating the order and matching it with two counter orders with diffrent brokers                           # src/test/java/features/ETHINR.feature:248
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130728609.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3734849.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99999.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1"    # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:51.457Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3cd7195b-17c8-42b2-99eb-c5dac4e828a0","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:51.457Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:51.457Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3cd7195b-17c8-42b2-99eb-c5dac4e828a0","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:51.457Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Update an order for broker "B1" of  instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1" orderType "LIMIT"          # stepDefinations.SDplaceOrderofBroker1.update_an_order_of_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:54.005Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3e1a0504-3380-4614-9f1a-17e2ed5cf3f7","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:54.005Z"},"message":"Order updated successfully"}

  When Providing request PathUrl "PlaceOrder" with method "PATCH"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order updated successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then Extracting the data "data"                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.Extracting_the_data(java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:21:54.005Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3e1a0504-3380-4614-9f1a-17e2ed5cf3f7","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:21:54.005Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130718602.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3734849.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99999.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:21:59.849Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"7ee7c1df-6ab7-4e99-a618-2b87e6aa0e61","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:21:59.849Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:00.677Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"81c92461-60e2-499a-82ad-ae0640ca2a70","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:22:00.677Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:00.677Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"81c92461-60e2-499a-82ad-ae0640ca2a70","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:22:01.142Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130718613.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3744829.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 9996.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 9980.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 16.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -12.0
  Then Check fees "4" for diffrent broker                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:301)

  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)

@GetBalanceforDifferentBroker @Regression @ETH
Scenario: (placing BUY order first)Verify funds while when order moves in (open--->partially_fulfilled--->fulfilled) for diffrent brokers                        # src/test/java/features/ETHINR.feature:305
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130718613.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3744829.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1"    # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:22:13.024Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"75ce880f-04eb-4474-8e6d-5afe47c13d62","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:22:13.024Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:22:13.024Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"75ce880f-04eb-4474-8e6d-5afe47c13d62","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:22:13.024Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130708606.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3744829.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:17.496Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"ec8008fa-9f64-4d42-a722-68b445ee3aed","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:22:17.496Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:18.308Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"24399c73-db5d-4b9e-aa30-cf052cb2739f","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:22:18.308Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:18.308Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"24399c73-db5d-4b9e-aa30-cf052cb2739f","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:22:18.801Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130708617.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3754809.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 9996.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 9980.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 16.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -12.0
  Then Check fees "4" for diffrent broker                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:350)

  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)

@GetBalanceforDifferentBrokerDF12 @Regression @ETH
Scenario: (placing BUY order first)Verify funds while when order moves in (open--->partially_decrement--->partially_fulfilled(fulfilled)) for diffrent brokers   # src/test/java/features/ETHINR.feature:354
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130708617.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3754809.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1"    # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:22:50.853Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"25454a50-fd11-441c-9008-700a93cc51ed","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:22:50.853Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:22:50.853Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"25454a50-fd11-441c-9008-700a93cc51ed","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:22:50.853Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130698610.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3754809.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:22:55.301Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"beea604c-bbbf-4aa5-bdb3-ada53d35c5d7","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:22:55.301Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:56.184Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"17cae74d-6218-424a-ad04-7320471a9019","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:22:56.184Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:22:56.184Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"17cae74d-6218-424a-ad04-7320471a9019","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:22:56.845Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130703619.8236362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000828.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3759799.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99996.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 4998.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 4990.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 0.5
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 0.5
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 8.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -6.0
  Then Check fees "2" for diffrent broker                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<8.0> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:399)

  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)

@GetBalanceforDifferentBrokerPFPD12 @Regression @ETH
Scenario: (placing BUY order first)Verify funds while when order moves in (open--->partially_fulfilled--->partially_decrement(fulfilled)) for diffrent brokers   # src/test/java/features/ETHINR.feature:403
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
{"message":"No Open Orders to Cancel"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130708651.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000828.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3759799.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99996.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1"    # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:09.765Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"92c3265d-da37-4226-95cd-dbe7c30a3cd2","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:09.765Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:09.765Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"92c3265d-da37-4226-95cd-dbe7c30a3cd2","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:09.765Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130698644.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000828.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3759799.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99996.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:21.982Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"8b93a4f2-aa02-41ca-9ddf-abc084422413","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:23:21.982Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:22.823Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"1e1b425d-5273-4295-b191-da5c98b8e566","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:22.823Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:22.823Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"1e1b425d-5273-4295-b191-da5c98b8e566","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:23:23.072Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130703653.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000829.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3764789.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99996.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = 4998.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = 4990.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = 0.5
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = 0.5
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 8.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -6.0
  Then Check fees "2" for diffrent broker                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<8.0> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:448)

  Then give sleep of "1000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)

@GetBalanceforDifferentBrokerUOM12 @Regression @ETH
Scenario: (placing sell order first)Verify funds while Updating the order and matching it with two counter orders with diffrent brokers                         # src/test/java/features/ETHINR.feature:452
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130703653.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000829.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3764789.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99996.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:30.781Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"1af73edf-9787-415f-aeb4-78b704e0c6fe","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:30.781Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:30.781Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"1af73edf-9787-415f-aeb4-78b704e0c6fe","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:30.781Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Update an order for broker "B1" of  instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "10000" username "user1" orderType "LIMIT"         # stepDefinations.SDplaceOrderofBroker1.update_an_order_of_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:32.459Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"49f36ed4-f06f-4cfb-b508-a107ebf04900","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:32.459Z"},"message":"Order updated successfully"}

  When Providing request PathUrl "PlaceOrder" with method "PATCH"                                                                                               # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order updated successfully"                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then Extracting the data "data"                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.Extracting_the_data(java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:32.459Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"49f36ed4-f06f-4cfb-b508-a107ebf04900","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:32.459Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130703653.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3764789.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99996.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:37.105Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"aa451219-0c23-44a0-bef9-011e4127da22","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:23:37.105Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:37.966Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"a8a828eb-ab14-4e44-8afe-3069266b77db","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:23:37.966Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:37.966Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"a8a828eb-ab14-4e44-8afe-3069266b77db","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:23:38.164Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130713657.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3754769.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = -10004.0
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = -10020.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = -1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = -1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 16.0
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= -12.0
  Then Check fees "4" for diffrent broker                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:498)

  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@GetBalanceforDifferentBroker @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_fulfilled--->fulfilled) for diffrent brokers                      # src/test/java/features/ETHINR.feature:508
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130713657.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000828.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3754769.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:45.989Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fd345676-4694-4ebc-becd-c0e8bdd6fd8e","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:45.989Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:23:45.989Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fd345676-4694-4ebc-becd-c0e8bdd6fd8e","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:23:45.989Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130713657.9136362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3754769.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99997.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:53.548Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"8cc1ef22-1650-4e09-967d-2550069d619f","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:23:53.548Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:54.536Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"523697f8-d180-4df5-94fa-b277b1b2d6c0","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:23:54.536Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:23:54.536Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"523697f8-d180-4df5-94fa-b277b1b2d6c0","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:23:54.827Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130714658.3136362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3753767.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = -1000.4000000059605
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = -1002.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = -1.0
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = -1.0
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 1.5999999940395355
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= 2.4000000059604645
  Then Check fees "4" for diffrent broker                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<1.5999999940395355> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ✽.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:546)

  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@GetBalanceforDifferentBroker @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_decrement--->partially_fulfilled(fulfilled)) for diffrent brokers # src/test/java/features/ETHINR.feature:556
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130714658.3136362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000827.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3753767.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:06.258Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"535bb686-c331-4a67-90a5-fdb7ceb4839a","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:06.258Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:06.258Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"535bb686-c331-4a67-90a5-fdb7ceb4839a","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:06.258Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130714658.3136362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3753767.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99998.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:14.073Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"76cf5e5f-94a4-44dd-ad62-9944254f0ac2","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:14.073Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:24:15.179Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"c4a77835-feeb-4ea2-895f-0b3c4bc1f0fa","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:24:15.179Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:24:15.179Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"c4a77835-feeb-4ea2-895f-0b3c4bc1f0fa","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.2","updated_at":"2022-06-10T06:24:15.444Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130715158.5136362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3753266.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99998.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = -500.20000000298023
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = -501.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = -0.5
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = -0.5
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = 0.7999999970197678
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= 1.2000000029802322
  Then Check fees "2" for diffrent broker                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<0.7999999970197678> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ✽.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:594)

  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@GetBalanceforDifferentBroker @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_fulfilled--->partially_decrement(fulfilled)) for diffrent brokers # src/test/java/features/ETHINR.feature:604
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130715158.5136362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b2inr = 3753266.08380877
  Given take balance of "INR" with api "Getbalance" with name "s1b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b2btc = 99998.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s1b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "BASE" quantity "1" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:33.046Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"1394533f-e83f-4c6b-bd22-d2824fa89b1f","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:33.046Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:33.046Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"1394533f-e83f-4c6b-bd22-d2824fa89b1f","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:33.046Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130715158.5136362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000825.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b2inr = 3753266.08380877
  Given take balance of "INR" with api "Getbalance" with name "s2b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b2btc = 99998.7194592636
  Given take balance of "ETH" with api "Getbalance" with name "s2b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B2" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-06-10T06:24:39.095Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"0.1","orderId":"07c3fadd-5959-46cc-a14a-4f2ef70fd428","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.2","updated_at":"2022-06-10T06:24:39.095Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "BASE" quantity "0.5" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:40.744Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"2e837e32-a7a6-4da0-abf1-14294671f255","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:40.744Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:40.744Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"2e837e32-a7a6-4da0-abf1-14294671f255","orderType":"","quantity":"0.5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:24:41.018Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130720161.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b2inr = 3752765.08380877
  Given take balance of "INR" with api "Getbalance" with name "s3b2inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b2btc = 99999.2194592636
  Given take balance of "ETH" with api "Getbalance" with name "s3b2btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
-------------------------------------------------------------------------------------
Deduction_of_INR_from_broker1 = -5003.3499999940395
-------------------------------------------------------------------------------------
Addition_of_INR_in_broker2 = -501.0
-------------------------------------------------------------------------------------
Addition_of_BTC_to_broker1 = -0.5
-------------------------------------------------------------------------------------
Deduction_of_BTC_to_broker2 = -0.5
-------------------------------------------------------------------------------------
Fee_for_diffrent_broker = -4502.3499999940395
-------------------------------------------------------------------------------------
And Fail because diffrence in Fee is= 4504.3499999940395
  Then Check fees "2" for diffrent broker                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(java.lang.String)
      java.lang.AssertionError: expected:<-4502.3499999940395> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ✽.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:642)

  Then give sleep of "1000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B2"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)

@GetBalanceforSameBroker1 @Regression @ETH
Scenario: Verify funds for same broker in fulfilled case                                                                                                            # src/test/java/features/ETHINR.feature:653
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130720161.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:50.391Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"b0889eb2-c3b8-46d6-8c70-6bd176930f4e","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:50.391Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:50.391Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"b0889eb2-c3b8-46d6-8c70-6bd176930f4e","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:50.391Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                   # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130710154.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:53.758Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"0c17d73b-c90f-433e-ab91-41b849295b5b","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:24:53.758Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:24:53.758Z","filledQuantity":1,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"0c17d73b-c90f-433e-ab91-41b849295b5b","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:24:54.014Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                             # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130720158.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3" for same broker                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker2 @Regression @ETH
Scenario: Verify funds for same broker in partially fulfilled case                                                                                                 # src/test/java/features/ETHINR.feature:683
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130720158.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:07.138Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"df58112c-c6fe-4ba0-b2c1-b555e87e34a4","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:07.138Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:07.138Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"df58112c-c6fe-4ba0-b2c1-b555e87e34a4","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:07.138Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130710151.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "10000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:12.293Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"4bf27f05-67ee-4fd1-944d-ad1b347fa359","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:12.293Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:12.293Z","filledQuantity":0.5,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"4bf27f05-67ee-4fd1-944d-ad1b347fa359","orderType":"","quantity":"0.5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:25:12.563Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130715153.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 5005.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
And Fail because diffrence in Fee is= -5003.5
  Then Check fees "1.5" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)
      org.junit.ComparisonFailure: expected:<[5005.0]> but was:<[1.5]>
	at org.junit.Assert.assertEquals(Assert.java:117)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:232)
	at ✽.Check fees "1.5" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:710)


@GetBalanceforSameBroker3 @Regression @ETH
Scenario: Verify funds for same broker in decremented case                                                                                                          # src/test/java/features/ETHINR.feature:713
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130715153.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:25.059Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"35fdf7d8-0f66-4ba0-a57f-797c9fc9cb72","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:25.059Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:25.059Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"35fdf7d8-0f66-4ba0-a57f-797c9fc9cb72","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:25.059Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                   # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130705146.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.1960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:27.856Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"b5839073-c9ae-4f99-95ab-5c0519bc88f8","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:27.856Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:27.856Z","filledQuantity":1,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"b5839073-c9ae-4f99-95ab-5c0519bc88f8","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:25:28.353Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                             # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725160.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                             # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = -10007.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Error Fail because diffrence in btc is = -0.5
  Then Check fees "0.0" for same broker                                                                                                                             # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)
      java.lang.AssertionError: expected:<9.000082619605245E7> but was:<9.000082669605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:242)
	at ✽.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:740)


@GetBalanceforSameBroker4SBCC @Regression @ETH
Scenario: Verify funds for same broker in cancelled case                                                                                                              # src/test/java/features/ETHINR.feature:743
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725160.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "3500000" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:46.583Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3500000","makerFee":"-0.04","orderId":"f4a23301-8afd-418a-a18d-a3d0bdc58d84","orderType":"","quantity":"0.002857142","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:46.583Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                      # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:46.583Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3500000","makerFee":"-0.04","orderId":"f4a23301-8afd-418a-a18d-a3d0bdc58d84","orderType":"","quantity":"0.002857142","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:46.583Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"cancelled":true,"info":{"message":"Order Cancelled"}},"message":"Order cancelled"}

  When Providing request PathUrl "PlaceOrder" with method "DELETE"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order cancelled"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725160.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "3600000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:50.807Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3600000","makerFee":"-0.04","orderId":"0b5e6568-ee21-4a4a-9a11-a0046a6dca8f","orderType":"","quantity":"0.002777777","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:50.807Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                      # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:50.807Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"3600000","makerFee":"-0.04","orderId":"0b5e6568-ee21-4a4a-9a11-a0046a6dca8f","orderType":"","quantity":"0.002777777","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:50.807Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
{"data":{"cancelled":true,"info":{"message":"Order Cancelled"}},"message":"Order cancelled"}

  When Providing request PathUrl "PlaceOrder" with method "DELETE"                                                                                                    # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                    # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order cancelled"                                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725160.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                               # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 0.0
diffrence inr before matching = 0.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 0.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "0.0" for same broker                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBrokerSBPIC5 @Regression @ETH
Scenario: Verify funds for same broker in price improvement case                                                                                                   # src/test/java/features/ETHINR.feature:779
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725160.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "10000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:55.450Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3b6639f8-a36b-45eb-892d-fd9eef307b2b","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:55.450Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:55.450Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"3b6639f8-a36b-45eb-892d-fd9eef307b2b","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:55.450Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130715153.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "5000" username "user2"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:58.061Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"5000","makerFee":"-0.04","orderId":"da17c1c3-2c12-444c-b424-f5816e02f50e","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:25:58.061Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"10000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:25:58.061Z","filledQuantity":1,"instrument":"ETH/INR","limit_price":"5000","makerFee":"-0.04","orderId":"da17c1c3-2c12-444c-b424-f5816e02f50e","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:25:58.334Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "4000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725157.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3" for same broker                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@BUYSELLBUYordersBSBFC @Regression @ETH
Scenario: Verify funds for same broker in BUYSELLBUY fulfilled case                                                                                             # src/test/java/features/ETHINR.feature:809
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725157.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "quote" quantity "5000" limitPrice "50" username "user1"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:09.979Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"8004f8b2-009a-4ec5-aa99-e0c7cb834834","orderType":"","quantity":"100","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:09.979Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:09.979Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"8004f8b2-009a-4ec5-aa99-e0c7cb834834","orderType":"","quantity":"100","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:09.979Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130720154.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "quote" quantity "10000" limitPrice "50" username "user" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:13.034Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"1d1d075c-4d01-41fd-80a2-09fc481617b5","orderType":"","quantity":"200","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:13.034Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  Then give sleep of "2000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"50","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:13.034Z","filledQuantity":100,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"1d1d075c-4d01-41fd-80a2-09fc481617b5","orderType":"","quantity":"200","quantityType":"","side":"SELL","status":"PARTIALLY_FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:26:13.284Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "PARTIALLY_FULFILLED"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "quote" quantity "5000" limitPrice "50" username "user2"  # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:16.412Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"a82a2f32-e64a-4344-9963-81f18ca0937b","orderType":"","quantity":"100","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:16.412Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                              # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"50","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:16.412Z","filledQuantity":100,"instrument":"ETH/INR","limit_price":"50","makerFee":"-0.04","orderId":"a82a2f32-e64a-4344-9963-81f18ca0937b","orderType":"","quantity":"100","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:26:16.612Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                          # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                         # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "2000"                                                                                                                                     # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                      # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725154.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                         # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 5003.5
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3.0" for same broker                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1PSSBUC @Regression @ETH
Scenario: (placing sell order first)Verify funds while Updating the order and matching it with two counter orders                                                # src/test/java/features/ETHINR.feature:846
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                          # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725154.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "1001" limitPrice "100" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:27.725Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"100","makerFee":"-0.04","orderId":"c557aed3-dde4-4c7a-ab42-c03aaf6c879f","orderType":"","quantity":"10.01","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:27.725Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:27.725Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"100","makerFee":"-0.04","orderId":"c557aed3-dde4-4c7a-ab42-c03aaf6c879f","orderType":"","quantity":"10.01","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:27.725Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Update an order for broker "B1" of  instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" orderType "LIMIT"      # stepDefinations.SDplaceOrderofBroker1.update_an_order_of_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:29.634Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"8e96d4d6-b594-4ec6-92d3-339ab162967e","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:29.634Z"},"message":"Order updated successfully"}

  When Providing request PathUrl "PlaceOrder" with method "PATCH"                                                                                                # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order updated successfully"                                                                                              # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then Extracting the data "data"                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.Extracting_the_data(java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:29.634Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"8e96d4d6-b594-4ec6-92d3-339ab162967e","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:29.634Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725154.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "1000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:32.312Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"c6281aac-6a6e-46ab-8eea-a08a6fd66cf8","orderType":"","quantity":"2","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:32.312Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "8000" limitPrice "1000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:33.011Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"23ba793f-77e5-426d-8323-95145accb881","orderType":"","quantity":"8","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:33.011Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                               # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:33.011Z","filledQuantity":8,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"23ba793f-77e5-426d-8323-95145accb881","orderType":"","quantity":"8","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:26:33.212Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                           # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                       # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725151.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                          # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3.0" for same broker                                                                                                                          # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1PSOPFF @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_fulfilled--->fulfilled) for same broker                              # src/test/java/features/ETHINR.feature:890
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725151.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:53.260Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"32f2d2ef-8f6e-4260-bda2-2c063c6f4387","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:53.260Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:53.260Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"32f2d2ef-8f6e-4260-bda2-2c063c6f4387","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:53.260Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725151.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "1000" username "user2"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:55.928Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"58798032-c8ba-43b5-a5a7-4dbad76c7638","orderType":"","quantity":"2","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:55.928Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "8000" limitPrice "1000" username "user3"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:56.779Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"21944d87-c010-41d2-948d-d5a639888e58","orderType":"","quantity":"8","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:26:56.779Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:26:56.779Z","filledQuantity":8,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"21944d87-c010-41d2-948d-d5a639888e58","orderType":"","quantity":"8","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:26:56.960Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3.0" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker152SPOPDD @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_decrement--->decrement) for same broker                              # src/test/java/features/ETHINR.feature:926
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:02.001Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fdb48d85-d579-4de5-b5d5-a42b39970643","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:02.001Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:02.001Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fdb48d85-d579-4de5-b5d5-a42b39970643","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:02.001Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:04.717Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"5df9b3bf-c1b2-40f4-9aa1-6f0a82e4b593","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:04.717Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:20.699Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e93e7912-6008-48e1-b0b5-26db840d4e07","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:20.699Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:20.699Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e93e7912-6008-48e1-b0b5-26db840d4e07","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:27:20.997Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 0.0
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 0.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "0.0" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1PSODPF @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_decrement--->partially_fulfilled(fulfilled)) for same broker         # src/test/java/features/ETHINR.feature:962
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:25.767Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"cb95e6ae-b96b-47c3-b264-377fac54db8b","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:25.767Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:25.767Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"cb95e6ae-b96b-47c3-b264-377fac54db8b","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:25.767Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725148.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:28.630Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"453110f4-62af-4934-968a-a6ef0e7722dd","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:28.630Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user2"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:29.983Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"8e3e2aa7-53ff-480d-bb5d-f12c901a7374","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:29.983Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:29.983Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"8e3e2aa7-53ff-480d-bb5d-f12c901a7374","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:27:30.162Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725147.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 1.5
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 1.5  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "1.5" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1SPOPFPB @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_fulfilled--->partially_decrement(fulfilled)) for same broker         # src/test/java/features/ETHINR.feature:998
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725147.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:35.423Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e900078e-d817-4f84-b8d6-22b1fafdb175","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:35.423Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:35.423Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e900078e-d817-4f84-b8d6-22b1fafdb175","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:35.423Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725147.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user2"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:38.357Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"8bb7234e-e790-4ecb-af00-25509accf76b","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:38.357Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:39.396Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"cc1e1e5b-f165-4552-a369-ec0ea8937c39","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:39.396Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:39.396Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"cc1e1e5b-f165-4552-a369-ec0ea8937c39","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:27:39.740Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725145.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 1.5
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 1.5  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "1.5" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1 @Regression @ETH
Scenario: (placing sell order first)Verify funds while when order moves in (open--->partially_decrement--->cancel(partially_cancelled)) for same broker            # src/test/java/features/ETHINR.feature:1035
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725145.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:45.084Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"0935d14c-b33b-4aa9-9feb-360450d3c48e","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:45.084Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:45.084Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"0935d14c-b33b-4aa9-9feb-360450d3c48e","orderType":"","quantity":"10","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:45.084Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                             # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                  # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130725145.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000816.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:48.446Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"48c5b8cc-c014-4291-b019-222c6386093f","orderType":"","quantity":"5","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:48.446Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                   # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                            # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                         # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130725145.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000821.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                            # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 0.0
diffrence inr before matching = 0.0
diffrence btc before matching = 10.0
Error Fail because diffrence in btc is = 5.0
  Then Check fees "0.0" for same broker                                                                                                                            # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)
      java.lang.AssertionError: expected:<9.000082669605245E7> but was:<9.000082169605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:246)
	at ✽.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1067)


@GetBalanceforSameBroker1 @Regression @ETH
Scenario: (placing buy order first)Verify funds while Updating the order and matching it with two counter orders                                                  # src/test/java/features/ETHINR.feature:1071
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130725145.8636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000821.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "1001" limitPrice "100" username "user1"   # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:55.454Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"100","makerFee":"-0.04","orderId":"1af9db6d-0d6e-4731-8996-d95f4ca2e309","orderType":"","quantity":"10.01","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:55.454Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:55.454Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"100","makerFee":"-0.04","orderId":"1af9db6d-0d6e-4731-8996-d95f4ca2e309","orderType":"","quantity":"10.01","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:55.454Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Update an order for broker "B1" of  instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" orderType "LIMIT"       # stepDefinations.SDplaceOrderofBroker1.update_an_order_of_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:57.079Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e9ddf999-d091-4827-8d7d-86a584488686","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:27:57.079Z"},"message":"Order updated successfully"}

  When Providing request PathUrl "PlaceOrder" with method "PATCH"                                                                                                 # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order updated successfully"                                                                                               # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Then Extracting the data "data"                                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.Extracting_the_data(java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:27:57.079Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"e9ddf999-d091-4827-8d7d-86a584488686","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"PARTIALLY_FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:27:57.342Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
      org.junit.ComparisonFailure: expected:<[PARTIALLY_FULFILLED]> but was:<[OPEN]>
	at org.junit.Assert.assertEquals(Assert.java:117)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(SDplaceOrderofBroker1.java:138)
	at ✽.Verify key "data.status" of response "OPEN"(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1091)

  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "1000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "8000" limitPrice "1000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Then Check fees "3.0" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1PSOPFF1 @Regression @ETH
Scenario: (placing buy order first)Verify funds while when order moves in (open--->partially_fulfilled--->fulfilled) for same broker                              # src/test/java/features/ETHINR.feature:1114
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130720142.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:00.994Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"05920b04-6128-4af4-9540-e8e67268a860","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:00.994Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:00.994Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"05920b04-6128-4af4-9540-e8e67268a860","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:00.994Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130710135.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "1000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:03.828Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"68862c63-9b02-4bc1-b9c5-3a125812e2fb","orderType":"","quantity":"2","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:03.828Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "8000" limitPrice "1000" username "user3" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:04.679Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"18b860cb-b3a9-4ee9-b001-546b8407555b","orderType":"","quantity":"8","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:04.679Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:04.679Z","filledQuantity":8,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"18b860cb-b3a9-4ee9-b001-546b8407555b","orderType":"","quantity":"8","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:28:05.244Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130720139.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 3.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 3.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "3.0" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1SMPSOPDD1 @Regression @ETH
Scenario: (placing buy order first)Verify funds while when order moves in (open--->partially_decrement--->decrement) for same broker                              # src/test/java/features/ETHINR.feature:1150
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130720139.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:10.041Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"7666e580-3116-40a2-be34-528229ba09e0","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:10.041Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:10.041Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"7666e580-3116-40a2-be34-528229ba09e0","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:10.041Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130710132.3636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000826.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "2000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:12.576Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"4fe7e7ae-706e-445f-90f2-cd6b69655843","orderType":"","quantity":"2","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:12.576Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "8000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:13.294Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"f5db594e-42e7-4955-871f-8fcf431d3395","orderType":"","quantity":"8","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:13.294Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:13.294Z","filledQuantity":8,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"f5db594e-42e7-4955-871f-8fcf431d3395","orderType":"","quantity":"8","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:28:13.899Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130727144.2636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = -7004.9000000059605
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Error Fail because diffrence in btc is = -7.0
  Then Check fees "0.0" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)
      java.lang.AssertionError: expected:<9.000082669605245E7> but was:<9.000083369605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:242)
	at ✽.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1182)


@GetBalanceforSameBroker1SBPBPODPF @Regression @ETH
Scenario: (placing buy order first)Verify funds while when order moves in (open--->partially_decrement--->partially_fulfilled(fulfilled)) for same broker         # src/test/java/features/ETHINR.feature:1186
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130727144.2636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:18.319Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fc059e51-cee7-4e11-a74d-fee1c5b0e23d","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:18.319Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:18.319Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"fc059e51-cee7-4e11-a74d-fee1c5b0e23d","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:18.319Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130717137.2636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:20.938Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"9d2e3166-c63c-465b-b82f-136d094271ee","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:20.938Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:21.698Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"a303ba04-4ce9-4915-b319-99e35cbd0d82","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:21.698Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:21.698Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"a303ba04-4ce9-4915-b319-99e35cbd0d82","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:28:22.013Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130727142.7636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 1.5
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 1.5  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "1.5" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1SBOFPD @Regression @ETH
Scenario: (placing buy order first)Verify funds while when order moves in (open--->partially_fulfilled--->partially_decrement(fulfilled)) for same broker         # src/test/java/features/ETHINR.feature:1222
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130732146.2636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:26.728Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"0164d598-5f64-4036-b23c-a8baff4c93cb","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:26.728Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:26.728Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"0164d598-5f64-4036-b23c-a8baff4c93cb","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:26.728Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130722139.2636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user2" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:29.574Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"0ede9619-6440-4a99-8b22-2f1d120f830c","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:29.574Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:30.456Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"2c56dc5a-cb84-4178-81b0-868482a8bcdc","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:30.456Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"1000","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:30.456Z","filledQuantity":5,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"2c56dc5a-cb84-4178-81b0-868482a8bcdc","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"FULFILLED","takerFee":"0.07","updated_at":"2022-06-10T06:28:30.700Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130732144.7636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 1.5
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 1.5  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "1.5" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)

@GetBalanceforSameBroker1SBPBOPDPC @Regression @ETH
Scenario: (placing buy order first)Verify funds while when order moves in (open--->partially_decrement--->cancel(partially_cancelled)) for same broker            # src/test/java/features/ETHINR.feature:1258
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"18 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s1b1inr = 130732144.7636362590011
  Given take balance of "INR" with api "Getbalance" with name "s1b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s1b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s1b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "BUY" instrument "ETH/INR" quantityType "QUOTE" quantity "10000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:35.963Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"49f0fbb1-efd0-4b48-8cd8-44a78a2575c3","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:35.963Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:35.963Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"49f0fbb1-efd0-4b48-8cd8-44a78a2575c3","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:35.963Z"},"message":"Order fetched successfully"}

  And Verify the "data.orderId" of response "GetOrder"                                                                                                            # stepDefinations.SDplaceOrderofBroker1.verify_the_of_response(java.lang.String,java.lang.String)
  And Verify key "data.status" of response "OPEN"                                                                                                                 # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s2b1inr = 130722137.7636362590011
  Given take balance of "INR" with api "Getbalance" with name "s2b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s2b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s2b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
  Given Placing an order for broker "B1" of type "limit" side "SELL" instrument "ETH/INR" quantityType "QUOTE" quantity "5000" limitPrice "1000" username "user1" # stepDefinations.SDplaceOrderofBroker1.placing_an_order_of_type_side_instrument_quantity_type_quantity_limit_price_username(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-10T06:28:38.755Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"2af13fe0-82b4-402c-938e-7e94bd4eec8e","orderType":"","quantity":"5","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.07","updated_at":"2022-06-10T06:28:38.755Z"},"message":"Order placed successfully"}

  When Providing request PathUrl "PlaceOrder" with method "POST"                                                                                                  # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then I verify the  "200" in step                                                                                                                                # stepDefinations.SDplaceOrderofBroker1.i_verify_the_in_step(java.lang.String)
  And Verify key "message" of response "Order placed successfully"                                                                                                # stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(java.lang.String,java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
{"data":"19 open orders will be Cancelled","message":"Orders cancellation in progress"}

  When Providing request PathUrl "CancelAllOrders" with method "DELETE"                                                                                           # stepDefinations.SDplaceOrderofBroker1.providing_request_path_url_with_method(java.lang.String,java.lang.String)
  Then give sleep of "000"                                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.give_sleep_of_something(java.lang.String)
  Given loading the header for broker "B1"                                                                                                                        # stepDefinations.SDplaceOrderofBroker1.loading_the_header_for_broker_something(java.lang.String)
s3b1inr = 130732144.7636362590011
  Given take balance of "INR" with api "Getbalance" with name "s3b1inr"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
s3b1btc = 90000833.6960524464
  Given take balance of "ETH" with api "Getbalance" with name "s3b1btc"                                                                                           # stepDefinations.SDplaceOrderofBroker1.take_balance_of_with_api_with_name(java.lang.String,java.lang.String,java.lang.String)
FEE = 0.0
diffrence inr before matching = 10007.0
diffrence btc before matching = 0.0
Pass because diffrence in btc  = 0.0
Pass because diffrence in inr  = 0.0  which is equal to fee
And Pass because diffrence in Fee = 0.0  which is very less
  Then Check fees "0.0" for same broker                                                                                                                           # stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(java.lang.String)
?????????????????????????????????????????????????????????????????????????????????????
? Share your Cucumber Report with your team at https://reports.cucumber.io          ?
? Activate publishing with one of the following:                                    ?
?                                                                                   ?
? src/test/resources/cucumber.properties:          cucumber.publish.enabled=true    ?
? src/test/resources/junit-platform.properties:    cucumber.publish.enabled=true    ?
? Environment variable:                            CUCUMBER_PUBLISH_ENABLED=true    ?
? JUnit:                                           @CucumberOptions(publish = true) ?
?                                                                                   ?
? More information at https://cucumber.io/docs/cucumber/environment-variables/      ?
?                                                                                   ?
? Disable this message with one of the following:                                   ?
?                                                                                   ?
? src/test/resources/cucumber.properties:          cucumber.publish.quiet=true      ?
? src/test/resources/junit-platform.properties:    cucumber.publish.quiet=true      ?
?????????????????????????????????????????????????????????????????????????????????????
Tests run: 36, Failures: 17, Errors: 0, Skipped: 0, Time elapsed: 538.033 sec <<< FAILURE!
runScenario(cucumber.options.TestRunner)  Time elapsed: 18.873 sec  <<< FAILURE!
java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:116)

runScenario(cucumber.options.TestRunner)  Time elapsed: 19.238 sec  <<< FAILURE!
java.lang.AssertionError: expected:<5011.5> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:159)

runScenario(cucumber.options.TestRunner)  Time elapsed: 27.384 sec  <<< FAILURE!
java.lang.AssertionError: expected:<10007.0> but was:<0.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "0.0" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:202)

runScenario(cucumber.options.TestRunner)  Time elapsed: 23.279 sec  <<< FAILURE!
java.lang.AssertionError: expected:<-9946.459999998566> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:245)

runScenario(cucumber.options.TestRunner)  Time elapsed: 23.125 sec  <<< FAILURE!
java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:301)

runScenario(cucumber.options.TestRunner)  Time elapsed: 17.566 sec  <<< FAILURE!
java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:350)

runScenario(cucumber.options.TestRunner)  Time elapsed: 37.856 sec  <<< FAILURE!
java.lang.AssertionError: expected:<8.0> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:399)

runScenario(cucumber.options.TestRunner)  Time elapsed: 25.807 sec  <<< FAILURE!
java.lang.AssertionError: expected:<8.0> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:448)

runScenario(cucumber.options.TestRunner)  Time elapsed: 14.788 sec  <<< FAILURE!
java.lang.AssertionError: expected:<16.0> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:310)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:498)

runScenario(cucumber.options.TestRunner)  Time elapsed: 18.024 sec  <<< FAILURE!
java.lang.AssertionError: expected:<1.5999999940395355> but was:<4.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ?.Check fees "4" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:546)

runScenario(cucumber.options.TestRunner)  Time elapsed: 28.561 sec  <<< FAILURE!
java.lang.AssertionError: expected:<0.7999999970197678> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ?.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:594)

runScenario(cucumber.options.TestRunner)  Time elapsed: 18.068 sec  <<< FAILURE!
java.lang.AssertionError: expected:<-4502.3499999940395> but was:<2.0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_diffrent_broker(SDplaceOrderofBroker1.java:316)
	at ?.Check fees "2" for diffrent broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:642)

runScenario(cucumber.options.TestRunner)  Time elapsed: 19.154 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[5005.0]> but was:<[1.5]>
	at org.junit.Assert.assertEquals(Assert.java:117)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:232)
	at ?.Check fees "1.5" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:710)

runScenario(cucumber.options.TestRunner)  Time elapsed: 21.741 sec  <<< FAILURE!
java.lang.AssertionError: expected:<9.000082619605245E7> but was:<9.000082669605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:242)
	at ?.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:740)

runScenario(cucumber.options.TestRunner)  Time elapsed: 10.333 sec  <<< FAILURE!
java.lang.AssertionError: expected:<9.000082669605245E7> but was:<9.000082169605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:246)
	at ?.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1067)

runScenario(cucumber.options.TestRunner)  Time elapsed: 5.368 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[PARTIALLY_FULFILLED]> but was:<[OPEN]>
	at org.junit.Assert.assertEquals(Assert.java:117)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at stepDefinations.SDplaceOrderofBroker1.verify_key_of_response(SDplaceOrderofBroker1.java:138)
	at ?.Verify key "data.status" of response "OPEN"(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1091)

runScenario(cucumber.options.TestRunner)  Time elapsed: 8.378 sec  <<< FAILURE!
java.lang.AssertionError: expected:<9.000082669605245E7> but was:<9.000083369605245E7>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:685)
	at stepDefinations.SDplaceOrderofBroker1.calculate_fees_for_same_broker(SDplaceOrderofBroker1.java:242)
	at ?.Check fees "0.0" for same broker(file:///C:/Users/Dell/eclipse_csk/CSXautomation2Optimision/src/test/java/features/ETHINR.feature:1182)


Results :

Failed tests:   runScenario(cucumber.options.TestRunner): expected:<16.0> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<5011.5> but was:<2.0>
  runScenario(cucumber.options.TestRunner): expected:<10007.0> but was:<0.0>
  runScenario(cucumber.options.TestRunner): expected:<-9946.459999998566> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<16.0> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<16.0> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<8.0> but was:<2.0>
  runScenario(cucumber.options.TestRunner): expected:<8.0> but was:<2.0>
  runScenario(cucumber.options.TestRunner): expected:<16.0> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<1.5999999940395355> but was:<4.0>
  runScenario(cucumber.options.TestRunner): expected:<0.7999999970197678> but was:<2.0>
  runScenario(cucumber.options.TestRunner): expected:<-4502.3499999940395> but was:<2.0>
  runScenario(cucumber.options.TestRunner): expected:<[5005.0]> but was:<[1.5]>
  runScenario(cucumber.options.TestRunner): expected:<9.000082619605245E7> but was:<9.000082669605245E7>
  runScenario(cucumber.options.TestRunner): expected:<9.000082669605245E7> but was:<9.000082169605245E7>
  runScenario(cucumber.options.TestRunner): expected:<[PARTIALLY_FULFILLED]> but was:<[OPEN]>
  runScenario(cucumber.options.TestRunner): expected:<9.000082669605245E7> but was:<9.000083369605245E7>

Tests run: 36, Failures: 17, Errors: 0, Skipped: 0

[ERROR] There are test failures.

Please refer to C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\target\surefire-reports for the individual test results.
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\main\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ done ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\src\test\resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ done ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ done ---
[INFO] Skipping execution of surefire because it has already been run for this configuration
[INFO] 
[INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ done ---
[INFO] Building jar: C:\Users\Dell\eclipse_csk\CSXautomation2Optimision\target\done-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  09:12 min
[INFO] Finished at: 2022-06-10T11:58:57+05:30
[INFO] ------------------------------------------------------------------------
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:31.454Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"f4acbcc0-0ba5-440d-90ed-a4eee7914eec","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:31.454Z"},"message":"Order placed successfully"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:31.454Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"f4acbcc0-0ba5-440d-90ed-a4eee7914eec","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:31.454Z"},"message":"Order fetched successfully"}

{"data":{"cancelled":true,"info":{"message":"Order Cancelled"}},"message":"Order cancelled"}

{"data":"724 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:35.366Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"6a7413a1-8eb5-4257-bfb2-1a384b5c4868","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:35.366Z"},"message":"Order placed successfully"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:35.366Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"1000","makerFee":"-0.04","orderId":"6a7413a1-8eb5-4257-bfb2-1a384b5c4868","orderType":"","quantity":"10","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:35.366Z"},"message":"Order fetched successfully"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:36.856Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"103","makerFee":"-0.04","orderId":"057c84a7-7d95-4d61-ab72-ab4ef1c2ee48","orderType":"","quantity":"19.4174","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:36.856Z"},"message":"Order updated successfully"}

{"data":"726 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":"10927fbb-b0e3-4e3e-84a2-f6dc69029919","message":"Added the IP: 117.99.245.218"}

{"message":"IP removed successfully"}

{"data":"955 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":"725 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":[{"average_price":"0","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-30T05:09:57.718Z","filledQuantity":0,"instrument":"BTC/INR","limit_price":"900","makerFee":"-0.04","orderID":"cb1a3d0d-030e-4cbe-9af8-16ddaa33acce","quantity":1,"side":"BUY","status":"OPEN","takerFee":"0.07","trades":[],"updated_at":"2022-06-30T05:09:57.718Z"},{"average_price":"0","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-30T05:09:53.168Z","filledQuantity":0,"instrument":"BTC/INR","limit_price":"241","makerFee":"-0.04","orderID":"626a3fd8-a66c-4504-b49a-d5b347b4e40b","quantity":1,"side":"BUY","status":"OPEN","takerFee":"0.07","trades":[],"updated_at":"2022-06-30T05:09:53.168Z"}],"message":"Orders fetched successfully"}

{"data":[{"IP":"e6139753-07a9-49f5-b3ad-8ac28e6284ef","Address":"157.33.40.248"},{"IP":"8724c5c5-29d8-4d9d-a729-07e7d4f89268","Address":"152.57.155.193"},{"IP":"212648d2-210e-41c2-aece-821881db0f4c","Address":"10.0.10.11"},{"IP":"ab6fb647-1282-4d66-bbaf-ed5da4e43024","Address":"10.0.10.11"},{"IP":"0530e561-c791-481b-a2e2-887ce4a05b8c","Address":"10.0.10.11"},{"IP":"ac4055a1-7bef-4411-ae78-3fcdcff42062","Address":"10.0.10.11"},{"IP":"d2e797d5-2868-4720-aaab-c7f9e4f8e5c4","Address":"10.0.10.11"},{"IP":"6d9912ad-2f97-48aa-a24c-01986b6695a8","Address":"10.0.10.11"},{"IP":"6a9788c9-973d-4dcb-a8d6-8f100c58b42a","Address":"157.33.75.32"},{"IP":"40bcc7e3-aede-435d-950a-ef1cca5d1a6f","Address":"10.0.10.11"},{"IP":"b34ef687-6a12-47df-831f-841e88715ff5","Address":"157.33.39.179"},{"IP":"59585338-ca6d-4af3-a304-8fb8358c275a","Address":"157.33.39.179"},{"IP":"caa54949-7972-4ea7-a47b-4160bbd57915","Address":"157.33.39.177"},{"IP":"cd9f22f9-dcf5-4a0c-8ea5-e14818314435","Address":"157.33.39.179"},{"IP":"73e9c00f-0e24-4d39-a8e7-490398939e89","Address":"157.33.39.179"},{"IP":"3c4d170b-3f49-4e02-b5eb-ba0cb0192fcc","Address":"157.33.39.179"},{"IP":"b5eec62c-dba7-42fd-b7f5-4af915f41e24","Address":"157.33.65.175"},{"IP":"ff2c641b-093d-43ed-8ffe-3c5c37aa2319","Address":"157.33.39.171"},{"IP":"d1b22fc5-fa81-4ff1-aff3-c8187756db55","Address":"157.33.39.179"},{"IP":"34060c34-184f-4c68-86e8-f81c8cd51c8c","Address":"152.57.116.67"},{"IP":"f14002ef-f334-4488-bcb8-6f597082a1ef","Address":"152.57.140.254"},{"IP":"b1050d39-7255-40ff-95af-6fcf2d7dc9dd","Address":"152.57.136.101"},{"IP":"57b00ed9-cb0c-409e-8b0f-cdfc91019778","Address":"152.57.156.122"},{"IP":"4fabe859-dc88-430e-8c2f-9bad336d25f0","Address":"152.57.128.192"},{"IP":"e9a38577-00f9-4c4c-993a-e762395f0dbc","Address":"152.57.132.121"},{"IP":"11e6e991-d828-47be-a170-37c5cfa1e813","Address":"157.33.61.133"},{"IP":"b9e695b4-b69f-4b6b-965b-623861ab9c46","Address":"110.226.157.74"},{"IP":"9e8b232f-bb7f-49c0-975b-99988bfad630","Address":"152.57.138.17"},{"IP":"84562abd-a183-4f5e-a688-42ed0eda4f72","Address":"157.33.36.77"},{"IP":"a560bfac-11dd-4248-84d8-535fa57d84bc","Address":"157.33.36.75"},{"IP":"f4393fc2-ce2a-49f7-a8ee-fe40f65a61c9","Address":"157.33.61.136"},{"IP":"4d3e303d-5f0c-45cb-bb22-907a2b8255cc","Address":"157.33.57.199"},{"IP":"497d2df3-afea-4cd9-b978-28c340f76a8c","Address":"157.33.101.143"},{"IP":"7adbaec0-01f7-41f1-aa94-9c36abea90f9","Address":"157.33.96.224"},{"IP":"580e855a-fbc8-409e-ba2f-df61b65d33ab","Address":"10.2.27.130"},{"IP":"e86d0315-ceec-4659-b0a7-24490ae7757d","Address":"223.177.227.24"},{"IP":"365b0aa8-f478-44eb-b5f4-0c6ed4c207da","Address":"223.177.227.2"},{"IP":"3f3327a9-c08b-4a43-a2cc-674a52c3b416","Address":"157.33.108.62"},{"IP":"51433723-e78b-4119-a08a-c34269bd7b73","Address":"0.0.0.0"},{"IP":"c6eaec00-e874-48ed-bfe9-b7bfc3ac3eb1","Address":"192.168.43.105"},{"IP":"0137dc5f-b01f-4ed7-b504-7ec7a7f4b97c","Address":"157.33.112.46"},{"IP":"92466826-e18a-4d00-a2a1-ad05d362119e","Address":"106.211.113.199"},{"IP":"27a1be91-55d3-4812-825f-e0f4b19f3a0b","Address":"223.177.227.246"},{"IP":"00234f48-300a-486b-8c07-4fef6d1ac6cd","Address":"157.33.112.40"},{"IP":"ce583736-4a41-4fd4-a67c-634a136eb020","Address":"192.168.1.22"},{"IP":"1b4df246-b648-429c-913e-38524ddc51f0","Address":"106.213.46.9"},{"IP":"1723eda9-84e6-4184-8ee9-cd3be0aff91b","Address":"152.57.135.146"},{"IP":"31e22e6c-620a-4e9e-84ac-a8d455088e60","Address":"106.220.141.48"},{"IP":"0ae57e4c-5cd1-4aa9-85dd-d46015200f3a","Address":"117.99.248.136"},{"IP":"5ff99379-9837-4467-ac69-28d9977d130f","Address":"117.99.254.56"},{"IP":"8e2ed08e-8306-45a2-850c-05558ea7b809","Address":"117.99.245.39"},{"IP":"0310ee02-8005-4fc1-93a1-293affd789cd","Address":"117.99.241.50"},{"IP":"6497ed75-0b3a-4da1-a7d7-cf5faa4cb0ab","Address":"117.99.240.97"},{"IP":"26ddf43d-b975-4706-a051-c19644a08841","Address":"106.220.219.187"},{"IP":"d6a915cb-1449-49e7-bf2e-1ca5f81e1fbb","Address":"106.195.10.209"},{"IP":"c8c07ef2-19f5-435b-a402-52a71647180c","Address":"106.195.14.70"},{"IP":"3b4ce703-d810-4142-b013-9b80becd6cd6","Address":"106.195.14.69"},{"IP":"d958b8a8-9b10-4d12-97f4-192a062ba29c","Address":"106.195.4.139"},{"IP":"832de172-a008-45ce-bbde-ac19fdd260d2","Address":"106.195.9.128"},{"IP":"e5a64b26-81b1-4f8e-a016-eabf77819637","Address":"106.220.95.4"},{"IP":"33813c0d-0f45-4948-a62b-8d2dc5f2d627","Address":"106.220.94.202"},{"IP":"28dd4e5c-04c6-4f65-9103-28d4ecef93b7","Address":"192.168.173.232"},{"IP":"dcf6344b-dd93-4738-a92b-62ed01f13c52","Address":"106.195.12.183"},{"IP":"628a0c4e-8cfd-4ea1-a523-6ed87e40eab5","Address":"106.220.94.204"},{"IP":"68a962c9-33ec-49b3-80de-94c2bf6fa107","Address":"106.195.14.45"},{"IP":"bef5a91b-75cc-40e5-9901-9062253d258b","Address":"106.195.8.75"},{"IP":"bf9ef987-170a-4b51-ae62-137a1e510d64","Address":"106.195.6.75"},{"IP":"76daa31e-8611-40a5-9d69-64f0718afe34","Address":"106.195.9.3"},{"IP":"ed25c950-efb0-45f1-b590-0ad1c3ab3ef9","Address":"106.220.94.24"},{"IP":"6547de82-de26-499b-a871-3d1347545e18","Address":"106.220.94.14"},{"IP":"fe2bddf0-bb00-4ba3-9f95-9732f92248bf","Address":"106.195.6.229"},{"IP":"47d5b321-a7b7-4412-8051-03decc4dbf28","Address":"106.195.15.139"},{"IP":"fd13aaaf-5cc4-4219-9de2-09a258e53206","Address":"106.195.1.153"},{"IP":"2ba90337-0c48-4fbf-89d1-4697f5501d14","Address":"106.195.15.120"},{"IP":"fec46f46-b040-4feb-9e4c-a81df35e3caf","Address":"106.195.0.118"},{"IP":"0350cfb8-de84-4de9-8883-a786826c021e","Address":"106.195.14.0"},{"IP":"6c4e1e76-dabb-419d-b2dc-74f0492d42d7","Address":"106.220.166.143"},{"IP":"a6bdf86b-23e3-4442-ab41-1c8577e8145a","Address":"106.195.8.50"},{"IP":"0d75413c-e77b-4297-bf08-bdc55bc29f13","Address":"106.195.12.233"},{"IP":"9333d2f1-587e-4945-85c8-f24c225493c5","Address":"106.195.8.59"},{"IP":"b07cacaf-73e9-4451-9970-55faf9cbc3dd","Address":"106.193.205.109"},{"IP":"501e0a72-708b-4340-bcd8-4239a6173183","Address":"106.195.14.251"},{"IP":"8263bde6-414d-4c5b-943a-95d82133729b","Address":"106.220.152.235"}],"message":"Listed IPs for the Broker"}

s1b1inr = 240275516073.2626162590011
s1b1btc = 10110000833.9929660264
s1b2inr = 9146896.250254493
s1b2btc = 9980098975.8075411836
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-07-01T05:06:46.633Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"4663ddc8-43c5-4cc0-9eda-78d4e2717929","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-07-01T05:06:46.633Z"},"message":"Order placed successfully"}

{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-07-01T05:06:46.633Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"4663ddc8-43c5-4cc0-9eda-78d4e2717929","orderType":"","quantity":"1","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-07-01T05:06:46.633Z"},"message":"Order fetched successfully"}

s2b1inr = 240275506066.2626162590011
s2b1btc = 10110000833.9929660264
s2b2inr = 9149932.010254493
s2b2btc = 9980098979.8071411836
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:50.400Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"7205eb2f-c461-46bb-b75d-404cb0244a36","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:50.400Z"},"message":"Order placed successfully"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:06:50.400Z","filledQuantity":0,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderId":"7205eb2f-c461-46bb-b75d-404cb0244a36","orderType":"","quantity":"1","quantityType":"","side":"SELL","status":"OPEN","takerFee":"0.09","updated_at":"2022-07-01T05:06:50.400Z"},"message":"Order fetched successfully"}

SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:07:24.108Z","filledQuantity":0,"instrument":"USDT/INR","limit_price":"102","makerFee":"0","orderId":"db641260-b007-4212-ab3f-fcd75b961387","orderType":"","quantity":"98.0392","quantityType":"","side":"BUY","status":"OPEN","takerFee":"1","updated_at":"2022-07-01T05:07:24.108Z"},"message":"Order placed successfully"}

{"data":{"average_price":"0","brokerId":"3ab607d8-8836-4aeb-a71d-7030e7c4524f","created_at":"2022-07-01T05:07:25.520Z","filledQuantity":0,"instrument":"USDT/INR","limit_price":"102","makerFee":"0","orderId":"00452bce-4dd7-443c-bdb8-86eeefe62d2e","orderType":"","quantity":"98.0392","quantityType":"","side":"BUY","status":"OPEN","takerFee":"1","updated_at":"2022-07-01T05:07:25.520Z"},"message":"Order placed successfully"}

{"data":"10927fbb-b0e3-4e3e-84a2-f6dc69029919","message":"Activated the IP: 117.99.245.218"}

{"message":"IP removed successfully"}

{"data":"416 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":"725 open orders will be Cancelled","message":"Orders cancellation in progress"}

{"data":[{"average_price":"300","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-07-01T05:06:46.633Z","filledQuantity":1,"instrument":"ETH/INR","limit_price":"10000","makerFee":"-0.04","orderID":"4663ddc8-43c5-4cc0-9eda-78d4e2717929","quantity":1,"side":"BUY","status":"FULFILLED","takerFee":"0.07","trades":[{"baseQuantity":0.2626,"createdAt":"2022-07-01T05:06:54.177Z","feeDenomination":"INR","isBuyerMaker":false,"price":300,"quoteQuantity":78.78,"status":"FULFILLED","totalMakerFee":-0.03,"totalTakerFee":0.06,"tradeID":"23e4efa4-14eb-43a5-b6bc-ca924afa04bb","updatedAt":"2022-07-01T05:06:54.177Z"},{"baseQuantity":0.3333,"createdAt":"2022-07-01T05:06:53.857Z","feeDenomination":"INR","isBuyerMaker":false,"price":300,"quoteQuantity":99.99,"status":"FULFILLED","totalMakerFee":-0.04,"totalTakerFee":0.07,"tradeID":"ef94c29b-a0d4-4c5f-b0a8-678a3fc2958e","updatedAt":"2022-07-01T05:06:53.857Z"},{"baseQuantity":0.3333,"createdAt":"2022-07-01T05:06:53.536Z","feeDenomination":"INR","isBuyerMaker":false,"price":300,"quoteQuantity":99.99,"status":"FULFILLED","totalMakerFee":-0.04,"totalTakerFee":0.07,"tradeID":"a5d0af67-0f24-43b8-afe8-21bc1938a4ec","updatedAt":"2022-07-01T05:06:53.536Z"},{"baseQuantity":0.0708,"createdAt":"2022-07-01T05:06:53.188Z","feeDenomination":"INR","isBuyerMaker":false,"price":300,"quoteQuantity":21.24,"status":"FULFILLED","totalMakerFee":-0.01,"totalTakerFee":0.01,"tradeID":"fe02c724-3e7a-41bc-b00f-3b50da96403b","updatedAt":"2022-07-01T05:06:53.188Z"}],"updated_at":"2022-07-01T05:06:54.247Z"},{"average_price":"0","brokerID":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-06-30T05:09:57.718Z","filledQuantity":0,"instrument":"BTC/INR","limit_price":"900","makerFee":"-0.04","orderID":"cb1a3d0d-030e-4cbe-9af8-16ddaa33acce","quantity":1,"side":"BUY","status":"OPEN","takerFee":"0.07","trades":[],"updated_at":"2022-06-30T05:09:57.718Z"}],"message":"Orders fetched successfully"}

{"data":[{"IP":"e6139753-07a9-49f5-b3ad-8ac28e6284ef","Address":"157.33.40.248"},{"IP":"8724c5c5-29d8-4d9d-a729-07e7d4f89268","Address":"152.57.155.193"},{"IP":"212648d2-210e-41c2-aece-821881db0f4c","Address":"10.0.10.11"},{"IP":"ab6fb647-1282-4d66-bbaf-ed5da4e43024","Address":"10.0.10.11"},{"IP":"0530e561-c791-481b-a2e2-887ce4a05b8c","Address":"10.0.10.11"},{"IP":"ac4055a1-7bef-4411-ae78-3fcdcff42062","Address":"10.0.10.11"},{"IP":"d2e797d5-2868-4720-aaab-c7f9e4f8e5c4","Address":"10.0.10.11"},{"IP":"6d9912ad-2f97-48aa-a24c-01986b6695a8","Address":"10.0.10.11"},{"IP":"6a9788c9-973d-4dcb-a8d6-8f100c58b42a","Address":"157.33.75.32"},{"IP":"40bcc7e3-aede-435d-950a-ef1cca5d1a6f","Address":"10.0.10.11"},{"IP":"b34ef687-6a12-47df-831f-841e88715ff5","Address":"157.33.39.179"},{"IP":"59585338-ca6d-4af3-a304-8fb8358c275a","Address":"157.33.39.179"},{"IP":"caa54949-7972-4ea7-a47b-4160bbd57915","Address":"157.33.39.177"},{"IP":"cd9f22f9-dcf5-4a0c-8ea5-e14818314435","Address":"157.33.39.179"},{"IP":"73e9c00f-0e24-4d39-a8e7-490398939e89","Address":"157.33.39.179"},{"IP":"3c4d170b-3f49-4e02-b5eb-ba0cb0192fcc","Address":"157.33.39.179"},{"IP":"b5eec62c-dba7-42fd-b7f5-4af915f41e24","Address":"157.33.65.175"},{"IP":"ff2c641b-093d-43ed-8ffe-3c5c37aa2319","Address":"157.33.39.171"},{"IP":"d1b22fc5-fa81-4ff1-aff3-c8187756db55","Address":"157.33.39.179"},{"IP":"34060c34-184f-4c68-86e8-f81c8cd51c8c","Address":"152.57.116.67"},{"IP":"f14002ef-f334-4488-bcb8-6f597082a1ef","Address":"152.57.140.254"},{"IP":"b1050d39-7255-40ff-95af-6fcf2d7dc9dd","Address":"152.57.136.101"},{"IP":"57b00ed9-cb0c-409e-8b0f-cdfc91019778","Address":"152.57.156.122"},{"IP":"4fabe859-dc88-430e-8c2f-9bad336d25f0","Address":"152.57.128.192"},{"IP":"e9a38577-00f9-4c4c-993a-e762395f0dbc","Address":"152.57.132.121"},{"IP":"11e6e991-d828-47be-a170-37c5cfa1e813","Address":"157.33.61.133"},{"IP":"b9e695b4-b69f-4b6b-965b-623861ab9c46","Address":"110.226.157.74"},{"IP":"9e8b232f-bb7f-49c0-975b-99988bfad630","Address":"152.57.138.17"},{"IP":"84562abd-a183-4f5e-a688-42ed0eda4f72","Address":"157.33.36.77"},{"IP":"a560bfac-11dd-4248-84d8-535fa57d84bc","Address":"157.33.36.75"},{"IP":"f4393fc2-ce2a-49f7-a8ee-fe40f65a61c9","Address":"157.33.61.136"},{"IP":"4d3e303d-5f0c-45cb-bb22-907a2b8255cc","Address":"157.33.57.199"},{"IP":"497d2df3-afea-4cd9-b978-28c340f76a8c","Address":"157.33.101.143"},{"IP":"7adbaec0-01f7-41f1-aa94-9c36abea90f9","Address":"157.33.96.224"},{"IP":"580e855a-fbc8-409e-ba2f-df61b65d33ab","Address":"10.2.27.130"},{"IP":"e86d0315-ceec-4659-b0a7-24490ae7757d","Address":"223.177.227.24"},{"IP":"365b0aa8-f478-44eb-b5f4-0c6ed4c207da","Address":"223.177.227.2"},{"IP":"3f3327a9-c08b-4a43-a2cc-674a52c3b416","Address":"157.33.108.62"},{"IP":"51433723-e78b-4119-a08a-c34269bd7b73","Address":"0.0.0.0"},{"IP":"c6eaec00-e874-48ed-bfe9-b7bfc3ac3eb1","Address":"192.168.43.105"},{"IP":"0137dc5f-b01f-4ed7-b504-7ec7a7f4b97c","Address":"157.33.112.46"},{"IP":"92466826-e18a-4d00-a2a1-ad05d362119e","Address":"106.211.113.199"},{"IP":"27a1be91-55d3-4812-825f-e0f4b19f3a0b","Address":"223.177.227.246"},{"IP":"00234f48-300a-486b-8c07-4fef6d1ac6cd","Address":"157.33.112.40"},{"IP":"ce583736-4a41-4fd4-a67c-634a136eb020","Address":"192.168.1.22"},{"IP":"1b4df246-b648-429c-913e-38524ddc51f0","Address":"106.213.46.9"},{"IP":"1723eda9-84e6-4184-8ee9-cd3be0aff91b","Address":"152.57.135.146"},{"IP":"31e22e6c-620a-4e9e-84ac-a8d455088e60","Address":"106.220.141.48"},{"IP":"0ae57e4c-5cd1-4aa9-85dd-d46015200f3a","Address":"117.99.248.136"},{"IP":"5ff99379-9837-4467-ac69-28d9977d130f","Address":"117.99.254.56"},{"IP":"8e2ed08e-8306-45a2-850c-05558ea7b809","Address":"117.99.245.39"},{"IP":"0310ee02-8005-4fc1-93a1-293affd789cd","Address":"117.99.241.50"},{"IP":"6497ed75-0b3a-4da1-a7d7-cf5faa4cb0ab","Address":"117.99.240.97"},{"IP":"26ddf43d-b975-4706-a051-c19644a08841","Address":"106.220.219.187"},{"IP":"d6a915cb-1449-49e7-bf2e-1ca5f81e1fbb","Address":"106.195.10.209"},{"IP":"c8c07ef2-19f5-435b-a402-52a71647180c","Address":"106.195.14.70"},{"IP":"3b4ce703-d810-4142-b013-9b80becd6cd6","Address":"106.195.14.69"},{"IP":"d958b8a8-9b10-4d12-97f4-192a062ba29c","Address":"106.195.4.139"},{"IP":"832de172-a008-45ce-bbde-ac19fdd260d2","Address":"106.195.9.128"},{"IP":"e5a64b26-81b1-4f8e-a016-eabf77819637","Address":"106.220.95.4"},{"IP":"33813c0d-0f45-4948-a62b-8d2dc5f2d627","Address":"106.220.94.202"},{"IP":"28dd4e5c-04c6-4f65-9103-28d4ecef93b7","Address":"192.168.173.232"},{"IP":"dcf6344b-dd93-4738-a92b-62ed01f13c52","Address":"106.195.12.183"},{"IP":"628a0c4e-8cfd-4ea1-a523-6ed87e40eab5","Address":"106.220.94.204"},{"IP":"68a962c9-33ec-49b3-80de-94c2bf6fa107","Address":"106.195.14.45"},{"IP":"bef5a91b-75cc-40e5-9901-9062253d258b","Address":"106.195.8.75"},{"IP":"bf9ef987-170a-4b51-ae62-137a1e510d64","Address":"106.195.6.75"},{"IP":"76daa31e-8611-40a5-9d69-64f0718afe34","Address":"106.195.9.3"},{"IP":"ed25c950-efb0-45f1-b590-0ad1c3ab3ef9","Address":"106.220.94.24"},{"IP":"6547de82-de26-499b-a871-3d1347545e18","Address":"106.220.94.14"},{"IP":"fe2bddf0-bb00-4ba3-9f95-9732f92248bf","Address":"106.195.6.229"},{"IP":"47d5b321-a7b7-4412-8051-03decc4dbf28","Address":"106.195.15.139"},{"IP":"fd13aaaf-5cc4-4219-9de2-09a258e53206","Address":"106.195.1.153"},{"IP":"2ba90337-0c48-4fbf-89d1-4697f5501d14","Address":"106.195.15.120"},{"IP":"fec46f46-b040-4feb-9e4c-a81df35e3caf","Address":"106.195.0.118"},{"IP":"0350cfb8-de84-4de9-8883-a786826c021e","Address":"106.195.14.0"},{"IP":"6c4e1e76-dabb-419d-b2dc-74f0492d42d7","Address":"106.220.166.143"},{"IP":"a6bdf86b-23e3-4442-ab41-1c8577e8145a","Address":"106.195.8.50"},{"IP":"0d75413c-e77b-4297-bf08-bdc55bc29f13","Address":"106.195.12.233"},{"IP":"9333d2f1-587e-4945-85c8-f24c225493c5","Address":"106.195.8.59"},{"IP":"b07cacaf-73e9-4451-9970-55faf9cbc3dd","Address":"106.193.205.109"},{"IP":"501e0a72-708b-4340-bcd8-4239a6173183","Address":"106.195.14.251"},{"IP":"8263bde6-414d-4c5b-943a-95d82133729b","Address":"106.220.152.235"}],"message":"Listed IPs for the Broker"}

s1b1inr = 240276836253.7426162590011
s1b1btc = 80007254.984349
s1b2inr = 9142951.801854493
s1b2btc = 17372632.3362
{"data":{"average_price":"0","brokerId":"97c02e87-a473-414b-9d27-78764a93d439","created_at":"2022-07-01T05:07:33.588Z","filledQuantity":0,"instrument":"USDT/INR","limit_price":"3500000","makerFee":"-0.04","orderId":"d75ab35b-dd6f-4d98-ac46-f515579f6398","orderType":"","quantity":"0.0028","quantityType":"","side":"BUY","status":"OPEN","takerFee":"0.07","updated_at":"2022-07-01T05:07:33.588Z"},"message":"Order placed successfully"}

[32m[1m┌───────────────────────────────────────────────────────────────────────────────────┐[0m
[32m[1m│[0m Share your Cucumber Report with your team at [36m[1m[4mhttps://reports.cucumber.io[0m          [32m[1m│[0m
[32m[1m│[0m Activate publishing with one of the following:                                    [32m[1m│[0m
[32m[1m│[0m                                                                                   [32m[1m│[0m
[32m[1m│[0m src/test/resources/cucumber.properties:          [36mcucumber.publish.enabled[0m=[36mtrue[0m    [32m[1m│[0m
[32m[1m│[0m src/test/resources/junit-platform.properties:    [36mcucumber.publish.enabled[0m=[36mtrue[0m    [32m[1m│[0m
[32m[1m│[0m Environment variable:                            [36mCUCUMBER_PUBLISH_ENABLED[0m=[36mtrue[0m    [32m[1m│[0m
[32m[1m│[0m JUnit:                                           [36m@CucumberOptions[0m(publish = [36mtrue[0m) [32m[1m│[0m
[32m[1m│[0m                                                                                   [32m[1m│[0m
[32m[1m│[0m More information at [36mhttps://cucumber.io/docs/cucumber/environment-variables/[0m      [32m[1m│[0m
[32m[1m│[0m                                                                                   [32m[1m│[0m
[32m[1m│[0m Disable this message with one of the following:                                   [32m[1m│[0m
[32m[1m│[0m                                                                                   [32m[1m│[0m
[32m[1m│[0m src/test/resources/cucumber.properties:          [36mcucumber.publish.quiet[0m=[36mtrue[0m      [32m[1m│[0m
[32m[1m│[0m src/test/resources/junit-platform.properties:    [36mcucumber.publish.quiet[0m=[36mtrue[0m      [32m[1m│[0m
[32m[1m└───────────────────────────────────────────────────────────────────────────────────┘[0m
